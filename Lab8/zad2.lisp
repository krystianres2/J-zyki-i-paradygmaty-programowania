(defvar *lista-studentów* '()) 
(defclass Student ()
  ((imie :accessor Student-imie)
   (nazwisko :accessor Student-nazwisko)
   (album :accessor Student-album)
   (id_przedmiotu :accessor Student-id_przedmiotu)
   (semestr :accessor Student-semestr)
   (ocena :accessor Student-ocena)
   (termin :accessor Student-termin)))

(defun dodajStudenta ()
    (let ((*student* (make-instance 'Student)))
        (print "Podaj imie studenta: ")
        (force-output *query-io*)
        (setf (Student-imie *student*) (read *query-io*))

        (print "Podaj nazwisko studenta: ")
        (force-output *query-io*)
        (setf (Student-nazwisko *student*) (read *query-io*))

        (print "Podaj numer albumu studenta: ")
        (force-output *query-io*)
        (setf (Student-album *student*) (read *query-io*))

        (print "Podaj id przedmiotu: ")
        (force-output *query-io*)
        (setf (Student-id_przedmiotu *student*) (read *query-io*))

        (print "Podaj numer semestru: ")
        (force-output *query-io*)
        (setf (Student-semestr *student*) (read *query-io*))

        (print "Podaj ocene: ")
        (force-output *query-io*)
        (setf (Student-ocena *student*) (read *query-io*))

        (print "Podaj termin wpisywania oceny: ")
        (force-output *query-io*)
        (setf (Student-termin *student*) (read *query-io*))
       
        (setq *lista-studentów* (append *lista-studentów* (list *student*)))
    ))

(defun wypiszDetaleStudenta (student)
  (format t "Imie: ~a~%" (Student-imie student))
  (format t "Nazwisko: ~a~%" (Student-nazwisko student))
  (format t "Numer albumu: ~a~%" (Student-album student))
  (format t "ID przedmiotu: ~a~%" (Student-id_przedmiotu student))
  (format t "Semestr: ~a~%" (Student-semestr student))
  (format t "Ocena: ~a~%" (Student-ocena student))
  (format t "Termin: ~a~%" (Student-termin student))
  )

(defun wyświetlListe ()
  (dolist (student *lista-studentów*)
    (format t "----------------------------~%")
    (wypiszDetaleStudenta student))

  (format t "----------------------------~%"))

(defun znajdźPoImieniu (imie)
  (let ((found-students '()))
    (dolist (student *lista-studentów* found-students)
      (when (equal imie (student-imie student))
        (setq found-students (append found-students (list student)))))))

(defun wyświetlPoImieniu ()
    (let ((pom 0))
        (print "Podaj imie studenta, którego dane chcesz wyświetlić: ")
        (force-output *query-io*)
        (setf pom (read *query-io*))
        (dolist (item (znajdźPoImieniu pom))
        (wypiszDetaleStudenta item))
    )
)

(defun znajdźPoNazwisku (nazwisko)
  (let ((found-students '()))
    (dolist (student *lista-studentów* found-students)
      (when (equal nazwisko (student-nazwisko student))
        (setq found-students (append found-students (list student)))))))

(defun wyświetlPoNazwisku ()
    (let ((pom 0))
        (print "Podaj nazwisko studenta, którego dane chcesz wyświetlić: ")
        (force-output *query-io*)
        (setf pom (read *query-io*))
        (dolist (item (znajdźPoNazwisku pom))
        (wypiszDetaleStudenta item))
    )
)

(defun znajdźPoAlbumie (album)
  (let ((found-students '()))
    (dolist (student *lista-studentów* found-students)
      (when (equal album (student-album student))
        (setq found-students (append found-students (list student)))))))

(defun wyświetlPoAlbumie ()
    (let ((pom 0))
        (print "Podaj numer albumu studenta, którego dane chcesz wyświetlić: ")
        (force-output *query-io*)
        (setf pom (read *query-io*))
        (dolist (item (znajdźPoAlbumie pom))
        (wypiszDetaleStudenta item))
    )
)

(defun znajdźPoIdPrzedmiotu (IdPrzedmiotu)
  (let ((found-students '()))
    (dolist (student *lista-studentów* found-students)
      (when (equal idPrzedmiotu (student-id_przedmiotu student))
        (setq found-students (append found-students (list student)))))))

(defun wyświetlPoIdPrzedmiotu ()
    (let ((pom 0))
        (print "Podaj numer Id przedmiotu, którego dane chcesz wyświetlić: ")
        (force-output *query-io*)
        (setf pom (read *query-io*))
        (dolist (item (znajdźPoIdPrzedmiotu pom))
        (wypiszDetaleStudenta item))
    )
)

(defun znajdźPoSemestrze (semestr)
  (let ((found-students '()))
    (dolist (student *lista-studentów* found-students)
      (when (equal semestr (student-semestr student))
        (setq found-students (append found-students (list student)))))))

(defun wyświetlPoSemestrze ()
    (let ((pom 0))
        (print "Podaj numer numer semestru, którego dane chcesz wyświetlić: ")
        (force-output *query-io*)
        (setf pom (read *query-io*))
        (dolist (item (znajdźPoSemestrze pom))
        (wypiszDetaleStudenta item))
    )
)

(defun znajdźPoOcenie (ocena)
  (let ((found-students '()))
    (dolist (student *lista-studentów* found-students)
      (when (equal ocena (student-ocena student))
        (setq found-students (append found-students (list student)))))))

(defun wyświetlPoOcenie ()
    (let ((pom 0))
        (print "Podaj numer ocene, której dane chcesz wyświetlić: ")
        (force-output *query-io*)
        (setf pom (read *query-io*))
        (dolist (item (znajdźPoOcenie pom))
        (wypiszDetaleStudenta item))
    )
)

(defun znajdźPoTerminie (termin)
  (let ((found-students '()))
    (dolist (student *lista-studentów* found-students)
      (when (equal termin (student-termin student))
        (setq found-students (append found-students (list student)))))))

(defun wyświetlPoTerminie ()
    (let ((pom 0))
        (print "Podaj termin którego dane chcesz wyświetlić: ")
        (force-output *query-io*)
        (setf pom (read *query-io*))
        (dolist (item (znajdźPoTerminie pom))
        (wypiszDetaleStudenta item))
    )
)

(dodajStudenta)
(dodajStudenta)
(dodajStudenta)
(wyświetlPoImieniu)
(wyświetlPoNazwisku)
(wyświetlPoAlbumie)
(wyświetlPoIdPrzedmiotu)
(wyświetlPoSemestrze)
(wyświetlPoOcenie)
(wyświetlPoTerminie)
